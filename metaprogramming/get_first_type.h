#pragma once

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    //    Get first type from type-pack 
    // 
    //////////////////////////////////////////////////////////////////////////////////////////////////////////


template<typename...Ts>
struct first_type;

template<typename T0, typename ...Ts>
struct first_type<T0, Ts...> {
	using type = T0;
};

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    //    Get nth type from type-pack
    // 
    //////////////////////////////////////////////////////////////////////////////////////////////////////////

template<size_t N, typename...Ts>
struct get_nth_type;

template<typename...Ts>
struct get_nth_type<0, Ts...> {
    using type = typename first_type<Ts...>::type;
};

template<size_t N, typename T1, typename...Ts>
struct get_nth_type<N, T1, Ts...> {
    static_assert(N < sizeof...(Ts) + 1, "out of range of parameter pack");
    using type = typename get_nth_type<N - 1, Ts...>::type;
};

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    //     Get pack less than one pack parameter    
    // 
    //////////////////////////////////////////////////////////////////////////////////////////////////////////

template<typename ...Ts>
struct less_pack;

template<typename T0, typename...Ts>
struct less_pack<T0,Ts...> {
    using pack_type = less_pack<Ts...>;
};